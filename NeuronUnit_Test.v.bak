`timescale 1ns / 100ps

module neuronunit_test();
  
  
  wire signed [15:0] dist;
  wire signed [15:0] norm_dist;
  wire divider_flag;
  
  reg clk;
  reg rst;
  reg en_input;
  reg en_renew;
  reg en_divide;
  reg renew_flag;
  reg ini_para;
  
  reg signed [15:0] in;
  reg signed [15:0] mu_ini;
  reg signed [15:0] sigma2_ini;
  
  
  neuronunit neuronunit_exam(.dist(dist), .norm_dist(norm_dist), .divider_flag(divider_flag), .in(in), .mu_ini(mu_ini), .sigma2_ini(sigma2_ini), .en_input(en_input), .en_renew(en_renew), .en_divide(en_divide), .renew_flag(renew_flag), .ini_para(ini_para), .clk(clk), .rst(rst));
  
  initial
  begin
    // initialzation
    clk = 0;
    rst = 0;
    en_input = 0;
    en_renew = 0;
    en_divide = 0;
    renew_flag = 0;
    ini_para = 0;
    in = 0;
    mu_ini = 0;
    sigma2_ini = 0;
    
    // reset
    #10
    rst = 1;
    #10
    rst = 0;
    
    // initialize mu, sigma2: 0.5, 1
    #10
    ini_para = 1;
    #10
    mu_ini = 8192;
    sigma2_ini = 16384;
    #10
    ini_para = 0;
    mu_ini = 0;
    sigma2_ini = 0;
    
    // 1st input
    
    
    rst = 1;
    // 1st: 0.8/1.5  8738
    #10
    dividend = 13107;
    division = 24576;
    #10
    cordic_div_en = 1;
    #10
    cordic_div_en = 0;
    // 2nd: 0.03/0.8  629
    #180
    dividend = 492;
    division = 13107;
    #10
    cordic_div_en = 1;
    #10
    cordic_div_en = 0;
    // 3rd: 0.001/0.8  21
    #180
    dividend = 16;
    division = 13107;
    #10
    cordic_div_en = 1;
    #10
    cordic_div_en = 0;
    // 4th: 0.00001/0.8  0
    #180
    dividend = 0;
    division = 13107;
    #10
    cordic_div_en = 1;
    #10
    cordic_div_en = 0;
    // 5th: -0.01/0.8  -209
    #180
    dividend = -164;
    division = 13107;
    #10
    cordic_div_en = 1;
    #10
    cordic_div_en = 0;
    #200
    $stop;
  end
  
  //clock
  initial
  begin
  forever
    #5 clk = ~clk;
  end
endmodule
